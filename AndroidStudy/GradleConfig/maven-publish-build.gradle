apply plugin: 'maven-publish'

//从项目gradle.properties中读取Maven仓库登录用户名
def getRepositoryUserName() {
    return hasProperty('MAVEN_USERNAME') ? MAVEN_USERNAME : ""
}
//从项目gradle.properties中读取Maven仓库登录密码
def getRepositoryPassword() {
    return hasProperty('MAVEN_PASSWORD') ? MAVEN_PASSWORD : ""
}

// 这个是把源码打入aar包中的任务
task sourceJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

def addMavenPublication = { MavenPublication publication, String flavor ->
    //全球唯一标识符
    publication.groupId = POM_GROUP_ID
    //构件标识符
    publication.artifactId = POM_ARTIFACT_ID
    //构件版本
    if (flavor == 'product') {
        publication.version = POM_VERSION_NAME
    } else {
        publication.version = "${POM_VERSION_NAME}-${flavor}"
    }

    publication.artifact "$buildDir/outputs/aar/${project.name}-${flavor}-release.aar"
    // 运行任务，把源码打进去
    publication.artifact sourceJar
}

publishing {
    publications {
        addMavenPublication(dev(MavenPublication), "dev")
        addMavenPublication(mirror(MavenPublication), "mirror")
        addMavenPublication(product(MavenPublication), "product")
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = POM_VERSION_NAME.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//            credentials {
//                username getRepositoryUserName()
//                password getRepositoryPassword()
//            }
        }
    }
}