apply plugin: 'maven'

//从项目gradle.properties中读取Maven仓库登录用户名
def getRepositoryUserName() {
    return hasProperty('MAVEN_USERNAME') ? MAVEN_USERNAME : ""
}
//从项目gradle.properties中读取Maven仓库登录密码
def getRepositoryPassword() {
    return hasProperty('MAVEN_PASSWORD') ? MAVEN_PASSWORD : ""
}

uploadArchives {
    repositories {
        mavenDeployer {
            //全球唯一标识符
            pom.groupId = POM_GROUP_ID
            //构件标识符
            pom.artifactId = POM_ARTIFACT_ID
            //构件版本
            pom.version = POM_VERSION_NAME

            // 私服仓库地址
            repository(url: uri("${rootProject.rootDir}/.repo")) {
                //用户名和密码授权验证
                authentication(userName: getRepositoryUserName(), password: getRepositoryPassword())
            }
            // 私服快照地址，只需版本号添加后缀 -SNAPSHOT
            snapshotRepository(url: uri("${rootProject.rootDir}/.repo")) {
                //用户名和密码授权验证
                authentication(userName: getRepositoryUserName(), password: getRepositoryPassword())
            }

            //配置pom.xml
            pom.project {
                //库名称
                name "POM_NAME"
                //打包下载上传的格式
                packaging "POM_PACKAGING"
                //描述信息
                description "POM_DESCRIPTION"
                //项目地址
                url "POM_URL"
                //scm(software configuration management)标签允许你配置你的代码库
                //不用SCM可忽略，随意配置
                scm {
                    url "POM_SCM_URL"
                    connection "POM_SCM_CONNECTION"
                    developerConnection "POM_SCM_DEV_CONNECTION"
                }
                //软件许可证书信息
                licenses {
                    license {
                        //license用于法律上的名称
                        name "POM_LICENCE_NAME"
                        //官方的license正文页面的URL
                        url "POM_LICENCE_URL"
                        //<!--项目分发的主要方式： repo，可以从Maven库下载
                        //manual， 用户必须手动下载和安装依赖-->
                        distribution "POM_LICENCE_DIST"
                    }
                }
                //开发者信息
                developers {
                    developer {
                        id "POM_DEVELOPER_ID"
                        name "POM_DEVELOPER_NAME"
                    }
                }
            }
        }
    }
}

// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义
task androidJavadocs(type: Javadoc) {
    // 设置源码所在的位置
    source = android.sourceSets.main.java.sourceFiles
}

// 生成javadoc.jar
task androidJavadocsJar(type: Jar) {
    // 指定文档名称
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

// 生成sources.jar
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

// 产生相关配置文件的任务
artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}
